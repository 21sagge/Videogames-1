@model List<VideogamesWebApp.Models.GameTransactionsViewModel>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1>Welcome, @ViewData["Username"]!</h1>

        <h1>My Games Library</h1>
        <form method="post" asp-controller="Account" asp-action="Logout">
            <button type="submit" class="btn btn-outline-danger">Logout</button>
        </form>
    </div>

    <form method="get" asp-controller="Games" asp-action="Index">
        <input type="text" id="searchQuery" name="searchQuery" class="form-control"
               placeholder="Search games..."
               value="@ViewData["searchQuery"]">
        <button type="submit" class="btn btn-primary mt-2">Search in my games</button>
    </form>
    <a href="@Url.Action("ViewAllGames", "Games")" class="btn btn-custom btn-buy-game mt-2 me-3">View Game catalog</a>
    <button type="button" class="btn btn-custom btn-buy-game mt-2 me-3" data-bs-toggle="modal" data-bs-target="#buyGameModal">Buy a New Game</button>

    <div>
        <button type="button" class="btn btn-custom btn-add-store mt-2 me-3" id="viewAllStoresBtn" data-bs-toggle="modal" data-bs-target="#viewAllStoresModal">
        ViewStore
    </button>
        <button type="button" class="btn btn-custom btn-add-platform mt-2 me-3" id="viewAllPlatformsBtn" data-bs-toggle="modal" data-bs-target="#viewAllPlatformsModal">
        ViewPlatform
    </button>
        <button type="button" class="btn btn-custom btn-add-launcher mt-2" data-bs-toggle="modal" id="viewAllLaunchersBtn" data-bs-toggle="modal" data-bs-target="#viewAllLaunchersModal">
        ViewLauncher
    </button>
    </div>

    <button type="button" class="btn btn-custom btn-add-store mt-2 me-3" data-bs-toggle="modal" data-bs-target="#addStoreModal">Add Store</button>
    <button type="button" class="btn btn-custom btn-add-platform mt-2 me-3" data-bs-toggle="modal" data-bs-target="#addPlatformModal">Add Platform</button>
    <button type="button" class="btn btn-custom btn-add-launcher mt-2" data-bs-toggle="modal" data-bs-target="#addLauncherModal">Add Launcher</button>
    

    <hr>
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="modal fade" id="buyGameModal" tabindex="-1" aria-labelledby="buyGameModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="buyGameModalLabel">Buy a New Game</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form asp-action="BuyGame" asp-controller="Games" method="post" id="buyGameForm">

                        <!-- Game Name Input -->
                        <div class="mb-3">
                            <label for="gameSearch">Game Name</label>
                            <div class="search-container">
                                <input type="text" class="form-control" id="gameSearch" placeholder="Start typing to search for a game...">
                                <div id="gameSearchResults" class="search-results"></div>
                                <div class="invalid-feedback" id="gameSearchError">Please select a valid game.</div>
                            </div>
                            <input type="hidden" id="gameId" name="GameId">
                        </div>

                        <!-- Store Input -->
                        <div class="mb-3">
                            <label for="storeSearch">Store</label>
                            <div class="search-container">
                                <input type="text" class="form-control" id="storeSearch" required placeholder="Start typing to search for a store...">
                                <div id="storeSearchResults" class="search-results"></div>
                                <div class="invalid-feedback" id="storeSearchError">
                                    Please select a valid store.
                                    <button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddStoreModal()">Add New Store</button>
                                </div>
                            </div>
                            <input type="hidden" id="storeId" name="StoreId">
                        </div>

                        <!-- Platform Input -->
                        <div class="mb-3">
                            <label for="platformSearch">Platform</label>
                            <div class="search-container">
                                <input type="text" class="form-control" id="platformSearch" placeholder="Start typing to search for a platform...">
                                <div id="platformSearchResults" class="search-results"></div>
                                <div class="invalid-feedback" id="platformSearchError">
                                    Please select a valid platform.
                                    <button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddPlatformModal()">Add New Platform</button>
                                </div>
                            </div>
                            <input type="hidden" id="platformId" name="PlatformId">
                        </div>

                        <!-- Launcher Input -->
                        <div class="mb-3">
                            <label for="launcherSearch">Launcher</label>
                            <div class="search-container">
                                <input type="text" class="form-control" id="launcherSearch" placeholder="Start typing to search for a launcher...">
                                <div id="launcherSearchResults" class="search-results"></div>
                                <div class="invalid-feedback" id="launcherSearchError">
                                    Please select a valid launcher.
                                    <button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddLauncherModal()">Add New Launcher</button>
                                </div>
                            </div>
                            <input type="hidden" id="launcherId" name="LauncherId">
                        </div>

                        <!-- Purchase Date with Default Value -->
                        <div class="mb-3">
                            <label for="purchaseDate" class="form-label">Purchase Date</label>
                            <input type="date" class="form-control" id="purchaseDate" name="PurchaseDate" required>
                        </div>

                        <!-- Price Input -->
                        <div class="mb-3">
                            <label for="price" class="form-label">Price</label>
                            <input type="number" step="0.01" class="form-control" id="price" name="Price" required>
                        </div>

                        <!-- Is Virtual Copy Dropdown -->
                        <div class="mb-3">
                            <label for="isVirtual" class="form-label">Is Virtual Copy</label>
                            <select class="form-control" id="isVirtual" name="IsVirtual" required>
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </select>
                        </div>

                        <!-- Notes Input -->
                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="Notes" required></textarea>
                        </div>

                        <button type="submit" class="btn btn-primary">Confirm Purchase</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Adding Store -->
    <div class="modal fade" id="addStoreModal" tabindex="-1" aria-labelledby="addStoreModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStoreModalLabel">Add New Store</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form asp-action="AddStore" asp-controller="Games" method="post" id="addStoreForm">
                        <div class="mb-3">
                            <label for="storeName" class="form-label">Store Name</label>
                            <input type="text" class="form-control" id="storeName" name="StoreName" required>
                        </div>
                        <div class="mb-3">
                            <label for="storeDescription" class="form-label">Store Description</label>
                            <textarea class="form-control" id="storeDescription" name="StoreDescription"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="storeLink" class="form-label">Store Link</label>
                            <input type="url" class="form-control" id="storeLink" name="StoreLink">
                        </div>
                        <button type="submit" class="btn btn-primary">Add Store</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Adding Platform -->
    <div class="modal fade" id="addPlatformModal" tabindex="-1" aria-labelledby="addPlatformModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addPlatformModalLabel">Add New Platform</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form asp-action="AddPlatform" asp-controller="Games" method="post" id="addPlatformForm">
                        <div class="mb-3">
                            <label for="platformName" class="form-label">Platform Name</label>
                            <input type="text" class="form-control" id="platformName" name="PlatformName" required>
                        </div>
                        <div class="mb-3">
                            <label for="platformDescription" class="form-label">Platform Description</label>
                            <textarea class="form-control" id="platformDescription" name="PlatformDescription"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Add Platform</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Adding Launcher -->
    <div class="modal fade" id="addLauncherModal" tabindex="-1" aria-labelledby="addLauncherModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addLauncherModalLabel">Add New Launcher</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form asp-action="AddLauncher" asp-controller="Games" method="post" id="addLauncherForm">
                        <div class="mb-3">
                            <label for="launcherName" class="form-label">Launcher Name</label>
                            <input type="text" class="form-control" id="launcherName" name="LauncherName" required>
                        </div>
                        <div class="mb-3">
                            <label for="launcherDescription" class="form-label">Launcher Description</label>
                            <textarea class="form-control" id="launcherDescription" name="LauncherDescription"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="link" class="form-label">Launcher Link</label>
                            <input type="url" class="form-control" id="link" name="Link">
                        </div>
                        <button type="submit" class="btn btn-primary">Add Launcher</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <!-- Modal for Viewing All Stores -->
    <div class="modal fade" id="viewAllStoresModal" tabindex="-1" aria-labelledby="viewAllStoresModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-primary shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="viewAllStoresModalLabel"><i class="bi bi-shop"></i>Stores</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div id="storeListContainer"></div>

                    <div id="paginationControls" class="mt-3 d-flex justify-content-center align-items-center">
                        <span id="pageInfo" class="me-3"></span>

                        <div id="paginationContainer" class="btn-group" role="group" aria-label="Pagination">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Viewing All Platforms -->
    <div class="modal fade" id="viewAllPlatformsModal" tabindex="-1" aria-labelledby="viewAllPlatformsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-success shadow-lg">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="viewAllPlatformsModalLabel"><i class="bi bi-controller"></i>Platforms</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div id="platformListContainer"></div>

                    <div id="paginationControls" class="mt-3 d-flex justify-content-center align-items-center">
                        <span id="platformPageInfo" class="me-3"></span>

                        <div id="platformPaginationContainer" class="btn-group" role="group" aria-label="Pagination">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Viewing All Launchers -->
    <div class="modal fade" id="viewAllLaunchersModal" tabindex="-1" aria-labelledby="viewAllLaunchersModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-primary shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="viewAllLaunchersModalLabel"><i class="bi bi-rocket"></i> Launchers</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div id="launcherListContainer"></div>

                    <div id="paginationControls" class="mt-3 d-flex justify-content-center align-items-center">
                        <span id="launcherPageInfo" class="me-3"></span>

                        <div id="launcherPaginationContainer" class="btn-group" role="group" aria-label="Pagination">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <h3>My Games </h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Game Name</th>
                <th scope="col">Purchase Date</th>
                <th scope="col">Price</th>
                <th scope="col">Virtual Copy</th>
                <th scope="col">Store Name</th>
                <th scope="col">Platform Name</th>
                <th scope="col">Launcher Name</th>
                <th scope="col">Main Game</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody id="transactionsTableBody">
            @foreach (var transaction in Model)
            {
                <tr>
                    <td><strong>@transaction.GameName</strong></td>
                    <td>@transaction.PurchaseDate.ToString("dd/MM/yyyy")</td>
                    <td>@transaction.Price.ToString("C", new System.Globalization.CultureInfo("it-IT"))</td>
                    <td>@(transaction.IsVirtual ? "Yes" : "No")</td>
                    <td>@transaction.StoreName</td>
                    <td>@transaction.PlatformName</td>
                    <td>@transaction.LauncherName</td>
                    <td>@(transaction.MainGameName ?? "-")</td>
                    <td>
                        <form asp-action="DeleteGame" asp-controller="Games" method="post" style="display:inline;">
                            <input type="hidden" name="transactionId" value="@transaction.TransactionId" />
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this game?');">Delete Game</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>

    </table>
</div>

<script>

    let currentPage = 1;
    const pageSize = 5;

    function fetchStores(page) {
        fetch(`@Url.Action("GetAllStores", "Games")?page=${page}&pageSize=${pageSize}`)
            .then(response => response.json())
            .then(data => {
                // Aggiorna il contenuto della lista dei negozi
                let storeListHtml = '';
                data.stores.forEach(store => {
                    storeListHtml += `
                            <div class="store-item mb-3">
                                <h5 class="store-name">${store.storeName}</h5>
                                <p class="store-description">${store.storeDescription || 'No description available'}</p>
                                <a href="${store.storeLink}" target="_blank" class="store-link">Visit Store</a>
                            </div>
                        `;
                });
                document.getElementById("storeListContainer").innerHTML = storeListHtml;

                currentPage = data.currentPage;

                document.getElementById("pageInfo").innerText = `Page ${currentPage} of ${data.totalPages}`;

                // Genera i pulsanti di paginazione numerati
                let paginationHtml = '';
                for (let i = 1; i <= data.totalPages; i++) {
                    paginationHtml += `
                            <button class="page-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">
                                ${i}
                            </button>
                        `;
                }
                document.getElementById("paginationContainer").innerHTML = paginationHtml;

                document.querySelectorAll(".page-btn").forEach(button => {
                    button.addEventListener("click", function () {
                        const page = parseInt(this.getAttribute("data-page"));
                        fetchStores(page); 
                    });
                });
            })
            .catch(error => console.error("Error fetching store data:", error));
    }

    document.getElementById("viewAllStoresBtn").addEventListener("click", function () {
        currentPage = 1; 
        fetchStores(currentPage);
    });



    let currentPlatformPage = 1;
    const platformPageSize = 5; 

    function fetchPlatforms(page) {
        fetch(`@Url.Action("GetAllPlatforms", "Games")?page=${page}&pageSize=${platformPageSize}`)
            .then(response => response.json())
            .then(data => {
                let platformListHtml = '';
                data.platforms.forEach(platform => {
                    platformListHtml += `
                                <div class="platform-item mb-3">
                                    <h5 class="platform-name">${platform.platformName}</h5>
                                    <p class="platform-description">${platform.platformDescription || 'No description available'}</p>
                                </div>
                            `;
                });
                document.getElementById("platformListContainer").innerHTML = platformListHtml;

                // Update pagination controls
                document.getElementById("platformPageInfo").innerText = `Page ${data.currentPage} of ${data.totalPages}`;
                updatePaginationButtons(data.currentPage, data.totalPages);
            })
            .catch(error => console.error("Error fetching platform data:", error));
    }

    function updatePaginationButtons(currentPage, totalPages) {
        const paginationContainer = document.getElementById("platformPaginationContainer");
        paginationContainer.innerHTML = ''; 

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.className = `btn btn-secondary ${i === currentPage ? 'active' : ''}`;
            pageButton.innerText = i;
            pageButton.setAttribute('data-page', i);

            pageButton.addEventListener('click', function () {
                currentPlatformPage = i; 
                fetchPlatforms(currentPlatformPage);
            });

            paginationContainer.appendChild(pageButton);
        }
    }

    document.getElementById("viewAllPlatformsBtn").addEventListener("click", function () {
        currentPlatformPage = 1; 
        fetchPlatforms(currentPlatformPage);
    });


    let currentLauncherPage = 1;
    const launcherPageSize = 5; 

    function fetchLaunchers(page) {
        fetch(`@Url.Action("GetAllLaunchers", "Games")?page=${page}&pageSize=${launcherPageSize}`)
            .then(response => response.json())
            .then(data => {
                let launcherListHtml = '';
                data.launchers.forEach(launcher => {
                    launcherListHtml += `
                                    <div class="launcher-item mb-3">
                                        <h5 class="launcher-name">${launcher.launcherName}</h5>
                                        <p class="launcher-description">${launcher.launcherDescription || 'No description available'}</p>
                                    </div>
                                `;
                });
                document.getElementById("launcherListContainer").innerHTML = launcherListHtml;

                document.getElementById("launcherPageInfo").innerText = `Page ${data.currentPage} of ${data.totalPages}`;
                updateLauncherPaginationButtons(data.currentPage, data.totalPages);
            })
            .catch(error => console.error("Error fetching launcher data:", error));
    }

    function updateLauncherPaginationButtons(currentPage, totalPages) {
        const paginationContainer = document.getElementById("launcherPaginationContainer");
        paginationContainer.innerHTML = ''; 

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.className = `btn btn-secondary ${i === currentPage ? 'active' : ''}`;
            pageButton.innerText = i;
            pageButton.setAttribute('data-page', i);

            pageButton.addEventListener('click', function () {
                currentLauncherPage = i; 
                fetchLaunchers(currentLauncherPage);
            });

            paginationContainer.appendChild(pageButton);
        }
    }

    document.getElementById("viewAllLaunchersBtn").addEventListener("click", function () {
        currentLauncherPage = 1; 
        fetchLaunchers(currentLauncherPage);
    });

    let fromStoreErrorButton = false;
    let fromPlatformErrorButton = false;
    let fromLauncherErrorButton = false;


    function showError(inputElement, errorElement, isValid, customMessage = '', buttonHtml = '') {
        if (!isValid) {
            errorElement.innerHTML = `
                                                            <div class="error-message">${customMessage}</div>
                                                            ${buttonHtml.replace('btn btn-sm btn-primary mt-2', 'error-action-button')}
                                                        `;
            errorElement.style.display = 'block';
            inputElement.classList.add('is-invalid');
        } else {
            errorElement.style.display = 'none';
            inputElement.classList.remove('is-invalid');
        }
    }
    function validateForm() {
        let isValid = true;

        // Validate Game
        if (!gameSelected.value) {
            const gameButton = '<button type="button" class="btn btn-sm btn-primary mt-2" onclick="redirectToAddGame()">Add New Game</button>';
            showError(gameSearch, document.getElementById('gameSearchError'), false, "Please enter a valid game or add it if you want", gameButton);
            isValid = false;
        }

        // Validate Store
        if (!storeSelected.value) {
            const storeButton = `<button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddStoreModal('${storeSearch.value}')">Add New Store</button>`;
            showError(storeSearch, document.getElementById('storeSearchError'), false, "Please enter a valid store or add it if you want", storeButton);
            isValid = false;
        }

        // Validate Platform
        if (!platformSelected.value) {
            const platformButton = '<button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddPlatformModal()">Add New Platform</button>';
            showError(platformSearch, document.getElementById('platformSearchError'), false, "Please enter a valid platform or add it if you want", platformButton);
            isValid = false;
        }

        // Validate Launcher
        if (!launcherSelected.value) {
            const launcherButton = '<button type="button" class="btn btn-sm btn-primary mt-2" onclick="openAddLauncherModal()">Add New Launcher</button>';
            showError(launcherSearch, document.getElementById('launcherSearchError'), false, "Please enter a valid launcher or add it if you want", launcherButton);
            isValid = false;
        }

        return isValid;
    }

    function redirectToAddGame() {
        // Reindirizza alla pagina di aggiunta del gioco
        window.location.href = '@Url.Action("ViewAllGames", "Games")#addGameModal';
    }

    function openAddStoreModal(storeName) {
        let buyGameModal = bootstrap.Modal.getInstance(document.getElementById('buyGameModal'));
        buyGameModal.hide();

        fromStoreErrorButton = true;

        document.getElementById('storeName').value = storeName;

        let storeModal = new bootstrap.Modal(document.getElementById('addStoreModal'));
        storeModal.show();
    }


    function openAddPlatformModal() {
        let buyGameModal = bootstrap.Modal.getInstance(document.getElementById('buyGameModal'));
        buyGameModal.hide();

        document.getElementById('platformName').value = platformSearch.value;

        fromPlatformErrorButton = true;

        let platformModal = new bootstrap.Modal(document.getElementById('addPlatformModal'));
        platformModal.show();
    }

    function openAddLauncherModal() {
        let buyGameModal = bootstrap.Modal.getInstance(document.getElementById('buyGameModal'));
        buyGameModal.hide();

        document.getElementById('launcherName').value = launcherSearch.value;


        fromLauncherErrorButton = true;

        let launcherModal = new bootstrap.Modal(document.getElementById('addLauncherModal'));
        launcherModal.show();
    }

    function handleFormSubmit(formId, url, updateFunction, closeModal = true) {
        document.getElementById(formId).addEventListener('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            fetch(url, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (formId === 'addStoreForm') {
                            let addStoreModal = bootstrap.Modal.getInstance(document.getElementById(formId).closest('.modal'));
                            addStoreModal.hide();

                            document.getElementById(formId).reset();

                            if (fromStoreErrorButton) {
                                openBuyGameModalWithStore(data.storeName, data.storeId);
                                fromStoreErrorButton = false;
                            }
                        } else if (formId === 'addPlatformForm') {
                            let addPlatformModal = bootstrap.Modal.getInstance(document.getElementById(formId).closest('.modal'));
                            addPlatformModal.hide();

                            document.getElementById(formId).reset();

                            if (fromPlatformErrorButton) {
                                openBuyGameModalWithPlatform(data.platformName, data.platformId);
                                fromPlatformErrorButton = false;
                            }
                        } else if (formId === 'addLauncherForm') {
                            let addLauncherModal = bootstrap.Modal.getInstance(document.getElementById(formId).closest('.modal'));
                            addLauncherModal.hide();

                            document.getElementById(formId).reset();

                            if (fromLauncherErrorButton) {
                                openBuyGameModalWithLauncher(data.launcherName, data.launcherId);
                                fromLauncherErrorButton = false;
                            }
                        } else {
                            updateFunction(data);
                            if (closeModal) {
                                bootstrap.Modal.getInstance(document.getElementById(formId).closest('.modal')).hide();
                            }
                        }
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        });
    }


    function openBuyGameModalWithStore(storeName, storeId) {

        const errorMessageElement = document.getElementById('storeSearchError');
        errorMessageElement.style.display = 'none';
        errorMessageElement.innerHTML = '';


        document.getElementById('storeSearch').value = storeName;
        document.getElementById('storeId').value = storeId;

        storeSelected.value = true;

        document.getElementById('storeSearch').classList.remove('is-invalid');


        let buyGameModal = new bootstrap.Modal(document.getElementById('buyGameModal'));
        buyGameModal.show();
    }


    function openBuyGameModalWithPlatform(platformName, platformId) {

        const errorMessageElement = document.getElementById('platformSearchError');
        errorMessageElement.style.display = 'none';
        errorMessageElement.innerHTML = '';


        document.getElementById('platformSearch').value = platformName;
        document.getElementById('platformId').value = platformId;

        platformSelected.value = true;
        document.getElementById('platformSearch').classList.remove('is-invalid');

        let buyGameModal = new bootstrap.Modal(document.getElementById('buyGameModal'));
        buyGameModal.show();
    }

    function openBuyGameModalWithLauncher(launcherName, launcherId) {

        const errorMessageElement = document.getElementById('launcherSearchError');
        errorMessageElement.style.display = 'none';
        errorMessageElement.innerHTML = '';


        document.getElementById('launcherSearch').value = launcherName;
        document.getElementById('launcherId').value = launcherId;

        launcherSelected.value = true;
        document.getElementById('launcherSearch').classList.remove('is-invalid');

        let buyGameModal = new bootstrap.Modal(document.getElementById('buyGameModal'));
        buyGameModal.show();
    }

    // Funzioni per aggiornare i campi nel modale di acquisto
    function updateStoreField(data) {
        document.getElementById('storeSearch').value = data.storeName;
        document.getElementById('storeId').value = data.storeId;
        storeSelected.value = true;
        showError(storeSearch, document.getElementById('storeSearchError'), true);
    }

    function updatePlatformField(data) {
        document.getElementById('platformSearch').value = data.platformName;
        document.getElementById('platformId').value = data.platformId;
        platformSelected.value = true;
        showError(platformSearch, document.getElementById('platformSearchError'), true);

        let buyGameModal = new bootstrap.Modal(document.getElementById('buyGameModal'));
        buyGameModal.show();
    }

    function updateLauncherField(data) {
        document.getElementById('launcherSearch').value = data.launcherName;
        document.getElementById('launcherId').value = data.launcherId;
        launcherSelected.value = true;
        showError(launcherSearch, document.getElementById('launcherSearchError'), true);

        let buyGameModal = new bootstrap.Modal(document.getElementById('buyGameModal'));
        buyGameModal.show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        handleFormSubmit('addStoreForm', '/Games/AddStore', updateStoreField);
        handleFormSubmit('addPlatformForm', '/Games/AddPlatform', updatePlatformField);
        handleFormSubmit('addLauncherForm', '/Games/AddLauncher', updateLauncherField);
    });

    document.getElementById('buyGameModal').addEventListener('hidden.bs.modal', function (e) {

        if (!document.querySelector('.modal.show')) {
            gameSearch.value = '';
            storeSearch.value = '';
            platformSearch.value = '';
            launcherSearch.value = '';

            gameId.value = '';
            storeId.value = '';
            platformId.value = '';
            launcherId.value = '';
        }
    });

    document.getElementById('buyGameForm').addEventListener('submit', function (event) {
        if (!validateForm()) {
            event.preventDefault(); // Previene l'invio del form se non è valido
        }
    });

    function selectSuggestion(inputElement, hiddenInputElement, selectedItem, flagRef, errorElement) {
        inputElement.value = selectedItem.textContent;
        hiddenInputElement.value = selectedItem.dataset.id;
        flagRef.value = true;
        showError(inputElement, errorElement, true);
        document.querySelectorAll('.search-results').forEach(results => {
            results.style.display = 'none';
        });
    }

    const gameSelected = { value: false };
    gameSearch.addEventListener('input', function () {
        gameSelected.value = false;
        const searchQuery = this.value.trim().toLowerCase();
        if (searchQuery.length > 0) {
            fetch(`/Games/SearchGames?query=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(games => {
                    gameSearchResults.innerHTML = '';
                    if (games.length > 0) {
                        games.forEach(game => {
                            const div = document.createElement('div');
                            div.className = 'search-result-item';
                            div.textContent = game.gameName;
                            div.dataset.id = game.gameId;


                            div.addEventListener('mousedown', () => {
                                selectSuggestion(gameSearch, gameId, div, gameSelected, document.getElementById('gameSearchError'));
                            });

                            gameSearchResults.appendChild(div);
                        });
                        gameSearchResults.style.display = 'block';
                    } else {
                        gameSearchResults.style.display = 'none';
                    }
                });
        } else {
            gameSearchResults.style.display = 'none';
        }
    });

    // Store Search
    const storeSelected = { value: false };
    storeSearch.addEventListener('input', function () {
        storeSelected.value = false;
        const searchQuery = this.value.trim().toLowerCase();
        if (searchQuery.length > 0) {
            fetch(`/Games/SearchStores?query=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(stores => {
                    storeSearchResults.innerHTML = '';
                    if (stores.length > 0) {
                        stores.forEach(store => {
                            const div = document.createElement('div');
                            div.className = 'search-result-item';
                            div.textContent = store.storeName;
                            div.dataset.id = store.storeId;
                            div.addEventListener('mousedown', () => {
                                selectSuggestion(storeSearch, storeId, div, storeSelected, document.getElementById('storeSearchError'));
                            });
                            storeSearchResults.appendChild(div);
                        });
                        storeSearchResults.style.display = 'block';
                    } else {
                        storeSearchResults.style.display = 'none';
                    }
                });
        } else {
            storeSearchResults.style.display = 'none';
        }
    });
    // Platform Search
    const platformSelected = { value: false };
    platformSearch.addEventListener('input', function () {
        platformSelected.value = false;
        const searchQuery = this.value.trim().toLowerCase();
        if (searchQuery.length > 0) {
            fetch(`/Games/SearchPlatforms?query=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(platforms => {
                    platformSearchResults.innerHTML = '';
                    if (platforms.length > 0) {
                        platforms.forEach(platform => {
                            const div = document.createElement('div');
                            div.className = 'search-result-item';
                            div.textContent = platform.platformName;
                            div.dataset.id = platform.platformId;
                            div.addEventListener('mousedown', () => {
                                selectSuggestion(platformSearch, platformId, div, platformSelected, document.getElementById('platformSearchError'));
                            });
                            platformSearchResults.appendChild(div);
                        });
                        platformSearchResults.style.display = 'block';
                    } else {
                        platformSearchResults.style.display = 'none';
                    }
                });
        } else {
            platformSearchResults.style.display = 'none';
        }
    });

    // Launcher Search
    const launcherSelected = { value: false };
    launcherSearch.addEventListener('input', function () {
        launcherSelected.value = false;
        const searchQuery = this.value.trim().toLowerCase();
        if (searchQuery.length > 0) {
            fetch(`/Games/SearchLaunchers?query=${encodeURIComponent(searchQuery)}`)
                .then(response => response.json())
                .then(launchers => {
                    launcherSearchResults.innerHTML = '';
                    if (launchers.length > 0) {
                        launchers.forEach(launcher => {
                            const div = document.createElement('div');
                            div.className = 'search-result-item';
                            div.textContent = launcher.launcherName;
                            div.dataset.id = launcher.launcherId;
                            div.addEventListener('mousedown', () => {
                                selectSuggestion(launcherSearch, launcherId, div, launcherSelected, document.getElementById('launcherSearchError'));
                            });
                            launcherSearchResults.appendChild(div);
                        });
                        launcherSearchResults.style.display = 'block';
                    } else {
                        launcherSearchResults.style.display = 'none';
                    }
                });
        } else {
            launcherSearchResults.style.display = 'none';
        }
    });

    document.addEventListener('click', function (e) {
        if (!e.target.closest('.search-container')) {
            document.querySelectorAll('.search-results').forEach(results => {
                results.style.display = 'none';
            });
        }
    });

    

    document.addEventListener("DOMContentLoaded", function () {

        const successMessage = document.querySelector(".alert-success");
        if (successMessage) {
            setTimeout(() => {
                successMessage.style.display = "none";
            }, 3000);
        }

        const errorMessage = document.querySelector(".alert-danger");
        if (errorMessage) {
            setTimeout(() => {
                errorMessage.style.display = "none";
            }, 3000);
        }
    });


    document.getElementById('storeSearch').addEventListener('input', function () {
        const inputValue = this.value;
        validateStoreInput(inputValue);
    });

    function validateStoreInput(inputValue) {
        const errorMessageElement = document.getElementById('storeSearchError');
        const storeInput = document.getElementById('storeSearch');

        if (existingStores.includes(inputValue)) {
            errorMessageElement.style.display = 'none';
            storeInput.classList.remove('is-invalid');
        } else {
            errorMessageElement.style.display = 'block';
            errorMessageElement.innerHTML = 'Store not found. Please select from the dropdown or create a new store.';
            storeInput.classList.add('is-invalid');
        }
    }

    function showDropdownSuggestions() {
        const storeSearchResults = document.getElementById('storeSearchResults');
        storeSearchResults.style.display = 'block';
    }

    document.getElementById('storeSearch').addEventListener('input', function () {
        showDropdownSuggestions();
    });

    document.addEventListener("DOMContentLoaded", function () {
        const purchaseDateInput = document.getElementById("purchaseDate");
        const today = new Date().toISOString().split("T")[0];
        purchaseDateInput.value = today;
    });


</script>
